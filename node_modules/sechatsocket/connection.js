var rp = require('request-promise');
var $ = require('cheerio');
var WebSocketClient = require('websocket').client;

var UA = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2593.0 Safari/537.36';

var cookieJar = rp.jar();
var request = rp.defaults({
		jar: cookieJar,
		headers: {
				'User-Agent': UA,
		},
		simple: false,
});


function login (site, keys, locker) {

	return getLoginPage()
		.then(storeLoginFkey)
		.then(attemptLogin)
		.then(checkLoginStatus);

	function getLoginPage() {
		return request.get(`https://${site}/users/login`)
			.then(resp => {
				console.log("Login page loaded!");
				return $.load(resp);
			});
	}

	function storeLoginFkey(dom) {
		console.log("loginFkey:" + (keys.loginFkey = dom('input[name="fkey"]').val()));
	}

	function attemptLogin() {
		return request({
			method: 'POST',
			uri: `https://${site}/users/login`,
			form: {
				isSignup: false,
				isLogin: true,
				isPassword: false,
				isAddLogin: false,
				hasCaptcha: false,
				fkey: keys.loginFkey,
				ssrc: '',
				email: locker.email,
				password: locker.password,
				submitbutton: 'Log in',
				oauthversion: '',
				oauthserver: '',
				openidusername: '',
				openididentifier: '',
			},
			headers: {
				'X-Requested-With': 'XMLHttpRequest',
			},
			resolveWithFullResponse: true,
		});
	}

	function checkLoginStatus(resp) {
		console.log('Server replied with status "' + resp.statusCode + '" on login request. (302 is fine.)');
	}
}

function getChatCredentials (site, keys, locker) {

	return getChatHomePage()
		.then(checkChatHomePageRequestStatus)
		.then(storeChatFkey)
		.then(getChatEventsList)
		.then(checkChatEventsListRequestStatus);

	function getChatHomePage() {
		return request.get(`https://chat.${site}/`);
	}

	function checkChatHomePageRequestStatus(body) {
		console.log('Got chat homepage');
		return $.load(body);
	}

	function storeChatFkey(dom) {
		console.log("chatFkey:" + (keys.chatFkey = dom('input[name="fkey"]').val()));
	}

	function getChatEventsList() {
		console.log('Getting events list!');
		return request({
			method: 'POST',
			uri: `http://chat.${site}/chats/${locker.startWithRoom}/events`,
			form: {
				fkey: keys.chatFkey,
				since: '0',
				mode: 'Messages',
				msgCount: '100',
			},
			headers: {
				'X-Requested-With': 'XMLHttpRequest',
			},
		});
	}

	function checkChatEventsListRequestStatus(resp) {
		console.log('Got event list!');
	}

}

function createSocketConnection(site, keys, locker) {
	return attemptWebSocketAuthentication()
		.then(checkSocketAuthStatus)
		.then(attemptSocketCreation);

	function attemptWebSocketAuthentication() {
		return request({
			method: 'POST',
			uri: `https://chat.${site}/ws-auth`,
			form: {
				roomid: String(locker.startWithRoom),
				fkey: keys.chatFkey,
			},
			headers: {
				'X-Requested-With': 'XMLHttpRequest',
			},
		});
	}

	function checkSocketAuthStatus(resp) {
		console.log('Got response from chat ws-auth!: ' + resp);
		keys.cookieString = cookieJar.getCookieString(`http://chat.${site}`);
		return JSON.parse(resp).url;
	}

	function attemptSocketCreation(url) {
		console.log('Fingers crossed... sending socket request!');
		var socket = new WebSocketClient();
		return new Promise((resolve, reject) => {
			console.log('Sending a request to: ' + url);
			socket.connect(url + '?l=' + Date.now(), null, `http://chat.${site}`, {
				'Sec-WebSocket-Extensions': 'permessage-deflate; client_max_window_bits',
				'Cookie': keys.cookieString,
				'User-Agent': UA,
				'Host': 'chat.sockets.stackexchange.com',
				'Origin': `http://chat.${site}`,
				'Accept-Encoding': 'gzip, deflate, sdch',
				'Accept-Language': 'en-US,en;q=0.8',
				'Cache-Control': 'no-cache',
			});
			socket.on('connect', function (connection) {
				console.log('Connection established');
				resolve(connection);
			});
			socket.on('connectFailed', reject);
			socket.on('httpResponse', (response, connection) => {
				console.log('This should not have happened... but handling httpResponse');
				debugger;
			});
		});
	}

}

module.exports = {
	login,
	getChatCredentials,
	createSocketConnection,
};
